version: 2

defaults: &build
  working_directory: ~/rtalib-circleci
  docker:
    - image: circleci/python:3.6.6
      environment:
        DATABASE_URL: mysql://root@127.0.0.1/rtalib_test_db
    - image: circleci/mysql:5.7.23-ram
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: true
        MYSQL_DATABASE: rtalib_test_db
        MYSQL_HOST: 127.0.0.1
        MYSQL_USER: root
    - image: circleci/redis:4.0.10-stretch

jobs:
  PyRTAlibTest:
    <<: *build
    steps:
      - checkout
      - run:
          name: Installing mysql-client
          command: sudo apt install -y mysql-client
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 1m
      - run:
          name: Executing sql script to initialize db
          command: |
            sudo mysql -h 127.0.0.1 -u root  -v < ~/rtalib-circleci/SetupDB/circleci/setup_mysql_db.sql
      - run:
          name: Creating the rtalibconfig configuration file
          command: |
            echo "[General]
            modelname=rtalib_dl_test_table
            mjdref=50000
            debug=no
            batchsize=1
            numberofthreads=1

            [Dtr]
            active=no
            debug=yes
            inputchannel=dtr.input
            outputchannel=dtr.output

            [MySql]
            host=127.0.0.1
            username=rtalib_test_user
            password=x1x2x3
            dbname=rtalib_test_db

            [Redis]
            host=127.0.0.1
            password=
            dbname=1
            indexon=rtalib_dl_test_table:timerealtt,rtalib_test_table:a

            [MySqlPipelineDatabase]
            active=no
            debug=no
            host=
            username=
            password=
            dbname=
            " > ~/rtalib-circleci/Configs/rtalibconfig_testing
      - run:
          name: Creating folder for test results
          command: |
            mkdir ~/rtalib-circleci/test_artifacts;
            touch ~/rtalib-circleci/test_artifacts/python_unittest_results.txt;
            touch ~/rtalib-circleci/test_artifacts/python_codecoverage_results.txt;
      - run:
          name: Installing Pipenv
          command: |
            sudo pip install pipenv;
      - restore_cache:
          keys:
            - pyrtalib-cachekey-{{ checksum "~/rtalib-circleci/PyRTAlib/Pipfile.lock" }}
      - run:
          name: Installing PyRTAlib dependencies
          command: |
            cd PyRTAlib/;
            pipenv install -e . ;
            pipenv graph;
      - save_cache:
          key: pyrtalib-cachekey-{{ checksum "~/rtalib-circleci/PyRTAlib/Pipfile.lock" }}
          paths:
            - /home/circleci/.local/share/virtualenvs/PyRTAlib-OIpGoUu8
      - run:
          name: Downloading Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter;
            chmod +x ./cc-test-reporter;
      - run:
          name: PyRTAlib unit testing
          command: |
            cd ~/rtalib-circleci/PyRTAlib/TestEnvironment/unit_tests;
            for f in *.py; do
              printf "\n\n * Testing ->  $f \n" >> ~/rtalib-circleci/test_artifacts/python_unittest_results.txt 2>&1;
              pipenv run python "$f" -v >> ~/rtalib-circleci/test_artifacts/python_unittest_results.txt 2>&1;
            done;
      - run:
          name: PyRTAlib test coverage
          command:
            cd ~/rtalib-circleci/PyRTAlib/TestEnvironment/code_coverage;
            ~/rtalib-circleci/cc-test-reporter before-build;
            . run_coverage_test_circleci.sh;
            ~/rtalib-circleci/cc-test-reporter after-build --coverage-input-type coverage.py --prefix ./ --exit-code $EXIT_CODE -r 13c050dace472310ac61ddf3c894a7bcaf46aa836f65ba80b7cf1561bf91fef3;
            pipenv run python -m coverage report >> ~/rtalib-circleci/test_artifacts/python_codecoverage_results.txt
      - store_artifacts:
          path: ~/rtalib-circleci/test_artifacts/python_unittest_results.txt
          destination: python_unittest_results
      - store_artifacts:
          path: ~/rtalib-circleci/test_artifacts/python_codecoverage_results.txt
          destination: python_codecoverage_results

workflows:
  version: 2
  pyrtalib_circleci_test:
    jobs:
      - PyRTAlibTest
